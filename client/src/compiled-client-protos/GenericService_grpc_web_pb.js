/**
 * @fileoverview gRPC-Web generated client stub for services
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: GenericService.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var requests_EmptyRequest_pb = require('./requests/EmptyRequest_pb.js')

var requests_DataRequest_pb = require('./requests/DataRequest_pb.js')

var responses_PingResponse_pb = require('./responses/PingResponse_pb.js')

var responses_EmptyResponse_pb = require('./responses/EmptyResponse_pb.js')

var responses_TestResponse_pb = require('./responses/TestResponse_pb.js')
const proto = {};
proto.services = require('./GenericService_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.GenericServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.GenericServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requests.EmptyRequest,
 *   !proto.responses.PingResponse>}
 */
const methodDescriptor_GenericService_Ping = new grpc.web.MethodDescriptor(
  '/services.GenericService/Ping',
  grpc.web.MethodType.UNARY,
  requests_EmptyRequest_pb.EmptyRequest,
  responses_PingResponse_pb.PingResponse,
  /**
   * @param {!proto.requests.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  responses_PingResponse_pb.PingResponse.deserializeBinary
);


/**
 * @param {!proto.requests.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.responses.PingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.responses.PingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.GenericServiceClient.prototype.ping =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.GenericService/Ping',
      request,
      metadata || {},
      methodDescriptor_GenericService_Ping,
      callback);
};


/**
 * @param {!proto.requests.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.responses.PingResponse>}
 *     Promise that resolves to the response
 */
proto.services.GenericServicePromiseClient.prototype.ping =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.GenericService/Ping',
      request,
      metadata || {},
      methodDescriptor_GenericService_Ping);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requests.DataRequest,
 *   !proto.responses.EmptyResponse>}
 */
const methodDescriptor_GenericService_Data = new grpc.web.MethodDescriptor(
  '/services.GenericService/Data',
  grpc.web.MethodType.UNARY,
  requests_DataRequest_pb.DataRequest,
  responses_EmptyResponse_pb.EmptyResponse,
  /**
   * @param {!proto.requests.DataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  responses_EmptyResponse_pb.EmptyResponse.deserializeBinary
);


/**
 * @param {!proto.requests.DataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.responses.EmptyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.responses.EmptyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.GenericServiceClient.prototype.data =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.GenericService/Data',
      request,
      metadata || {},
      methodDescriptor_GenericService_Data,
      callback);
};


/**
 * @param {!proto.requests.DataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.responses.EmptyResponse>}
 *     Promise that resolves to the response
 */
proto.services.GenericServicePromiseClient.prototype.data =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.GenericService/Data',
      request,
      metadata || {},
      methodDescriptor_GenericService_Data);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requests.EmptyRequest,
 *   !proto.responses.TestResponse>}
 */
const methodDescriptor_GenericService_TestData = new grpc.web.MethodDescriptor(
  '/services.GenericService/TestData',
  grpc.web.MethodType.UNARY,
  requests_EmptyRequest_pb.EmptyRequest,
  responses_TestResponse_pb.TestResponse,
  /**
   * @param {!proto.requests.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  responses_TestResponse_pb.TestResponse.deserializeBinary
);


/**
 * @param {!proto.requests.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.responses.TestResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.responses.TestResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.GenericServiceClient.prototype.testData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.GenericService/TestData',
      request,
      metadata || {},
      methodDescriptor_GenericService_TestData,
      callback);
};


/**
 * @param {!proto.requests.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.responses.TestResponse>}
 *     Promise that resolves to the response
 */
proto.services.GenericServicePromiseClient.prototype.testData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.GenericService/TestData',
      request,
      metadata || {},
      methodDescriptor_GenericService_TestData);
};


module.exports = proto.services;

